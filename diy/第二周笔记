数组的常用方法
    遍历方法  
        1.  for···in   遍历数组 返回数组的下标(字符串)
        2.  for···of   遍历数组 返回数组的每一个元素
    
    push()      在数组尾部新增一个或多个元素
        //返回值  新增元素后数组的长度 
        //是否影响原数组   是

    unshift()  在数组头部新增一个或多个元素
        // 返回值  新增元素后数组的长度 
        // 是否影响原数组   是

    pop()   删除数组尾部的元素
        // 返回值   被删除的元素 
        // 是否影响原数组   是

    shift()   删除数组头部的元素
        // 返回值    被删除的元素 
        // 是否影响原数组   是

    splice()  增删改

        // 删除
        // splice(startIndex,length)    自下标为startIndex的位置开始,删除length个元素
        // startIndex  起始下标 
        // length      删除元素的个数
        // 返回值  被删除的元素形成的数组
        // 是否影响原数组   是

        // 新增
        // splice(startIndex,0,arg1,arg2...argN)    自下标为startIndex的位置开始,新增一个或多个元素
        // startIndex  起始下标 
        // 0           不删除元素
        // 返回值  空数组 (没有被删除的元素 => 空数组)
        // 是否影响原数组   是

        // 修改  (先删除 在新增)
        // splice(startIndex,length,arg1,arg2...argN)    自下标为startIndex的位置开始,删除length个元素,新增一个或多个元素
        // startIndex  起始下标 
        // length      删除元素的个数
        // 返回值  被删除的元素形成的数组
        // 是否影响原数组   是

    reverse()    数组反转
        // 返回值  反转后的原数组
        // 是否改变原数组   是

    slice(startIndex,endIndex)    数组的裁切  [startIndex,endIndex )
        // startIndex  起始下标   默认值 0
        // endIndex    终止下标   默认值 length
        // [startIndex,endIndex )

        // 注意  slice() 如果不传参数,会使用默认值,得到一个与原数组元素相同的新数组 (数组进行了一个复制)  

        // 返回值  被裁切的元素形成的新数组
        // 是否改变原数组   否

    concat()   数组的拼接(将多个数组或元素拼接形成一个新的数组)
        //  如果拼接的是数组  则将数组展开,之后将数组中的每一个元素放到新数组中
        //             其他类型, 直接放到新数组中

        // 注意  concat() 如果不传参数,也会得到一个与原数组元素相同的新数组 (数组进行了一个复制)

    includes()   //判断数组中是否存在某个元素  
        存在=> true,不存在返回false (!!  ES6新增的)

    indexOf()   // 返回某个元素在数组中第一次出现的位置
        存在该元素,返回下标,不存在 返回 -1  (可以通过返回值 变相的判断是否存在该元素)

    join(char)    用特定的字符,将数组拼接形成字符串 (默认",")

数组的排序方法
    sort();
    // 1. 字符排序   根据字符在ascii 码表的位置大小进行排序 
    // 2. 纯数字排序   

    // 返回值  排序后的原数组
    // 是否能改变原数组  是
    sort  接收一个函数作为参数(告诉浏览器如何排序)   a,b是函数的形式参数, 代表比较的前后两个值  
    list.sort(function (a, b) {  // 告诉浏览器如何排序   a,b 形参 代表 前后两个数值
        // console.log(a, b);
        // return a - b;  //  a-b>0 a>b 前一个大于后一个时交换位置  大值放后面  从小到大排
        return b - a; // b-a>0   a < b 前一个小于后一个时交换位置   小值放后面  从大到小排
    });

数组的迭代方法
    forEach()  遍历数组,每次循环中执行传入的回调函数 
        // item  每次循环的当前元素
        // index  每次循环的当前下标
        // array  原数组

    map()  遍历数组, 每次循环时执行传入的回调函数,根据回调函数的返回值,生成一个新的数组
        // item  每次循环的当前元素
        // index  每次循环的当前下标
        // array  原数组

    filter()  遍历数组, 每次循环时执行传入的回调函数,回调函数返回一个条件,把满足条件的元素筛选出来放到新数组中
        // item  每次循环的当前元素
        // index  每次循环的当前下标
        // array  原数组

    some()  遍历数组, 每次循环时执行传入的回调函数,回调函数返回一个条件,只要有一个元素满足条件就返回true,都不满足返回false   => 判断数组中是否存在,满足某个条件的元素 
        // item  每次循环的当前元素
        // index  每次循环的当前下标
        // array  原数组